---
- name: Enable SSH service
  systemd:
    name: ssh
    enabled: yes
    state: started
  register: ssh_service

- name: Install nginx and dnsmasq
  apt:
    name:
      - nginx
      - dnsmasq
    state: present
    cache_valid_time: 2592000

- name: Check if nginx config needs update
  stat:
    path: /etc/nginx/sites-available/default
    checksum_algorithm: md5
  register: current_nginx_config

- name: Get source nginx config checksum
  stat:
    path: "{{ playbook_dir }}/files/nginx/default"
    checksum_algorithm: md5
  register: source_nginx_config
  delegate_to: localhost

- name: Copy nginx default site configuration
  copy:
    src: ../files/nginx/default
    dest: /etc/nginx/sites-available/default
    backup: no
  notify: restart nginx
  when: current_nginx_config.stat.checksum is not defined or current_nginx_config.stat.checksum != source_nginx_config.stat.checksum

- name: Enable and start nginx
  systemd:
    name: nginx
    enabled: yes
    state: started
  register: nginx_service

- name: Check if user oduvan exists
  getent:
    database: passwd
    key: oduvan
  failed_when: false
  register: user_check

- name: Create user oduvan
  user:
    name: oduvan
    shell: /bin/bash
    create_home: yes
    groups: sudo
  when: user_check.ansible_facts.getent_passwd.oduvan is not defined

- name: Check if webquiz virtual environment exists
  stat:
    path: /home/oduvan/venv_webquiz/bin/python
  register: venv_check

- name: Create Python virtual environment for webquiz
  command: python3 -m venv /home/oduvan/venv_webquiz
  become_user: oduvan
  when: not venv_check.stat.exists

- name: Install webquiz package in virtual environment
  command: /home/oduvan/venv_webquiz/bin/pip install webquiz==1.2.1
  become_user: oduvan
  when: not venv_check.stat.exists

- name: Set ownership of venv_webquiz directory
  file:
    path: /home/oduvan/venv_webquiz
    owner: oduvan
    group: oduvan
    recurse: yes
  when: not venv_check.stat.exists

- name: Create /mnt/data directory
  file:
    path: /mnt/data
    state: directory
    mode: '0755'

- name: Install exfat support packages
  apt:
    name:
      - exfat-fuse
      - exfatprogs
    state: present
    cache_valid_time: 2592000

- name: Check if data partition is already mounted
  shell: mountpoint -q /mnt/data
  register: mount_check
  failed_when: false
  changed_when: false

- name: Mount exfat data partition
  mount:
    path: /mnt/data
    src: /dev/mmcblk0p3
    fstype: exfat
    opts: defaults,uid=1000,gid=1000,umask=0022,nofail
    state: mounted
  when: mount_check.rc != 0

- name: Add data partition to fstab for persistent mount
  mount:
    path: /mnt/data
    src: /dev/mmcblk0p3
    fstype: exfat
    opts: defaults,uid=1000,gid=1000,umask=0022,nofail
    state: present

- name: Create webquiz directories on data partition
  file:
    path: "{{ item }}"
    state: directory
    owner: oduvan
    group: oduvan
    mode: '0755'
  loop:
    - /mnt/data/webquiz
    - /mnt/data/webfiles

- name: Check if webquiz server config needs update
  stat:
    path: /mnt/data/webquiz/server.conf
    checksum_algorithm: md5
  register: current_webquiz_config

- name: Get source webquiz config checksum
  stat:
    path: "{{ playbook_dir }}/files/webquiz/server.conf"
    checksum_algorithm: md5
  register: source_webquiz_config
  delegate_to: localhost

- name: Copy webquiz server configuration
  copy:
    src: ../files/webquiz/server.conf
    dest: /mnt/data/webquiz/server.conf
    owner: oduvan
    group: oduvan
    mode: '0644'
  when: current_webquiz_config.stat.checksum is not defined or current_webquiz_config.stat.checksum != source_webquiz_config.stat.checksum

# Copy scripts and configuration files efficiently
- name: Copy scripts
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
    backup: no
  loop:
    - { src: "../files/scripts/start-hotspot.sh", dest: "/usr/local/bin/start-hotspot.sh" }
    - { src: "../files/scripts/get-branch.sh", dest: "/usr/local/bin/get-branch.sh" }
    - { src: "../files/scripts/create_index_html.py", dest: "/usr/local/bin/create_index_html.py" }

- name: Copy systemd files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    backup: no
  loop:
    - { src: "../files/systemd/start-hotspot.service", dest: "/etc/systemd/system/start-hotspot.service" }
    - { src: "../files/systemd/ansible-pull.service", dest: "/etc/systemd/system/ansible-pull.service" }
  notify: reload systemd

- name: Copy configuration files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    backup: no
  loop:
    - { src: "../files/wifi.conf.example", dest: "/mnt/data/wifi.conf.example", owner: "oduvan", group: "oduvan", mode: "0644" }

- name: Create NetworkManager dnsmasq-shared.d directory
  file:
    path: /etc/NetworkManager/dnsmasq-shared.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy NetworkManager dnsmasq configuration for captive portal
  copy:
    src: ../files/NetworkManager/dnsmasq-shared.d/captive-portal.conf
    dest: /etc/NetworkManager/dnsmasq-shared.d/captive-portal.conf
    owner: root
    group: root
    mode: '0644'
    backup: no

# Check if services are already running
- name: Check service status
  systemd:
    name: "{{ item }}"
  register: service_status
  loop:
    - start-hotspot
    - ansible-pull

# Enable and start services only if needed
- name: Enable and start systemd services
  systemd:
    name: "{{ item.item }}"
    enabled: yes
    state: started
    daemon_reload: no
  loop: "{{ service_status.results }}"
  when: not item.status.ActiveState is defined or item.status.ActiveState != "active"

